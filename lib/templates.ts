/**
 * テンプレート生成
 * タスク 8.1: テンプレート生成機能の実装
 */

import type { Proposal } from "../types";

/**
 * スニペット定義を YAML 形式で生成
 * @param proposal スニペット提案
 * @returns YAML 形式のスニペット定義
 */
export function generateSnippetYAML(proposal: Proposal): string {
  if (!("snippet" in proposal.payload)) {
    throw new Error("This proposal is not a snippet");
  }

  const { text, alias } = proposal.payload.snippet;

  // Raycast Snippets の YAML 形式
  return `# ${proposal.title}
# ${proposal.rationale}

- name: ${alias}
  keyword: ${alias}
  text: |
    ${text}`;
}

/**
 * マクロテンプレートを Shell スクリプト形式で生成
 * @param proposal マクロ提案
 * @returns Shell スクリプト形式のマクロ
 */
export function generateMacroShell(proposal: Proposal): string {
  if (!("macro" in proposal.payload)) {
    throw new Error("This proposal is not a macro");
  }

  const { sequence } = proposal.payload.macro;

  // Raycast Script Commands 形式
  let script = `#!/bin/bash

# Required parameters:
# @raycast.schemaVersion 1
# @raycast.title ${proposal.title}
# @raycast.mode silent

# Optional parameters:
# @raycast.icon 🔗
# @raycast.description ${proposal.rationale}

# Documentation:
# @raycast.author Command Clinic
# @raycast.authorURL https://github.com/command-clinic

# Generated by Command Clinic
# Macro sequence detected from usage patterns

`;

  // シーケンスを Shell コマンドに変換
  sequence.forEach((aliasId, index) => {
    script += `# Step ${index + 1}: ${aliasId}\n`;
    script += `open "raycast://extensions/command-clinic/launcher?alias=${aliasId}"\n`;
    if (index < sequence.length - 1) {
      script += `sleep 1  # Wait for command to complete\n`;
    }
    script += `\n`;
  });

  script += `echo "Macro completed successfully"\n`;

  return script;
}

/**
 * ショートカットガイドをフォーマット
 * @param proposal ショートカット提案
 * @returns フォーマットされたガイドテキスト
 */
export function formatShortcutGuide(proposal: Proposal): string {
  if (!("shortcut" in proposal.payload)) {
    throw new Error("This proposal is not a shortcut");
  }

  const { aliasId, suggestedHotkey } = proposal.payload.shortcut;

  return `# ${proposal.title}

**推奨ホットキー**: ${suggestedHotkey}

## 設定手順

1. Raycast を開く（⌘ + Space）
2. "Settings" と入力して設定画面を開く
3. "Extensions" タブを選択
4. "Command Clinic" 拡張機能を探す
5. "${aliasId}" コマンドを見つける
6. "Record Hotkey" をクリック
7. ${suggestedHotkey} を押す
8. 完了！

## 理由

${proposal.rationale}

このコマンドは過去7日間で ${proposal.evidence.count || 0} 回起動されています。
ホットキーを設定することで、さらに効率的にアクセスできます。`;
}

/**
 * 提案の実装ガイドを生成
 * @param proposal 任意の提案
 * @returns 実装ガイドのテキスト
 */
export function generateImplementationGuide(proposal: Proposal): string {
  switch (proposal.type) {
    case "shortcut":
      return formatShortcutGuide(proposal);
    case "snippet":
      return `# スニペット定義\n\n\`\`\`yaml\n${generateSnippetYAML(proposal)}\n\`\`\`\n\n## 適用方法\n\n1. 上記の YAML をコピー\n2. Raycast Settings > Extensions > Snippets を開く\n3. 既存のスニペットファイルに貼り付け\n4. 保存して完了`;
    case "macro":
      return `# マクロスクリプト\n\n\`\`\`bash\n${generateMacroShell(proposal)}\n\`\`\`\n\n## 適用方法\n\n1. 上記のスクリプトをコピー\n2. Raycast Script Commands ディレクトリに保存\n   （通常: ~/Documents/Raycast/Scripts/）\n3. ファイルに実行権限を付与: \`chmod +x script.sh\`\n4. Raycast から実行可能に`;
    default:
      return "Unknown proposal type";
  }
}
